name: screenshot-and-visitor

on:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      add_like:
        description: 'Add your like (only one per user allowed)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pages: read
  actions: read

env:
  BADGE_STYLE: 'for-the-badge'
  BADGE_COLOR: 'brightgreen'
  LIKES_COLOR: 'gold'
  DATA_DIR: 'assets/db'
  SCREENSHOT_DIR: 'assets'

jobs:
  update-readme-and-visitor:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: üöÄ Initialize workflow
        run: |
          DATA_DIR="$DATA_DIR"
          SCREENSHOT_DIR="$SCREENSHOT_DIR"

          # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
          mkdir -p "$DATA_DIR" "$SCREENSHOT_DIR"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- AUTOGEN:STATS -->/{exit} {print}' README.md > README_before.tmp
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—ñ—Å–ª—è AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- END:AUTOGEN -->/{found=1; next} found{print}' README.md > README_after.tmp

          # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π README –∑ –æ—á–∏—â–µ–Ω–æ—é AUTOGEN —Å–µ–∫—Ü—ñ—î—é
          {
            cat README_before.tmp
            echo "<!-- AUTOGEN:STATS -->"
            echo "üîÑ Updating statistics and screenshot..."
            echo "<!-- END:AUTOGEN -->"
            cat README_after.tmp
          } > README.md

          # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
          rm -f README_before.tmp README_after.tmp

          echo "üöÄ Workflow initialized, README cleared"

      - name: üìä Collect all statistics
        run: |
          DATA_DIR="$DATA_DIR"
          STATS_FILE="$DATA_DIR/stats-data.json"
          USERS_FILE="$DATA_DIR/unique-users.json"
          STARGAZERS_FILE="$DATA_DIR/stargazers.json"
          MANUAL_LIKES_FILE="$DATA_DIR/manual-likes.json"
          OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          echo "üìä Collecting all repository statistics..."

          # === VISITORS ===
          echo "üëÄ Fetching visitors..."
          VIEWS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/traffic/views" \
            | jq '.uniques // 0')
          echo "üëÄ Unique visitors: $VIEWS"

          # === STARS & LIKES ===
          echo "‚≠ê Processing stars and likes..."
          STARS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/stargazers")

          if echo "$STARS_RESPONSE" | jq -e . >/dev/null 2>&1; then
            STARS_USERS=$(echo "$STARS_RESPONSE" | jq -r '.[].login' | jq -R -s 'split("\n") | map(select(length > 0))')
            STARS_COUNT=$(echo "$STARS_USERS" | jq 'length')
            STARGAZERS_DETAILED=$(echo "$STARS_RESPONSE" | jq '[.[] | {login: .login, avatar_url: .avatar_url, html_url: .html_url, starred_at: now | strftime("%Y-%m-%d %H:%M:%S")}]')
          else
            STARS_USERS='[]'
            STARS_COUNT=0
            STARGAZERS_DETAILED='[]'
          fi

          # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
          [ ! -f "$STATS_FILE" ] && echo '{"manual_likes": {"users": []}}' > "$STATS_FILE"

          # –û–±—Ä–æ–±–ª—è—î–º–æ –º–∞–Ω—É–∞–ª—å–Ω—ñ –ª–∞–π–∫–∏
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.add_like }}" = "true" ]; then
            USER="${{ github.actor }}"
            IS_STARGAZER=$(echo "$STARS_USERS" | jq --arg user "$USER" 'index($user) != null')
            
            if [ "$IS_STARGAZER" = "false" ]; then
              ALREADY_LIKED=$(jq --arg user "$USER" '.manual_likes.users | index($user) != null' "$STATS_FILE")
              if [ "$ALREADY_LIKED" = "false" ]; then
                CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")
                jq --arg user "$USER" --arg time "$CURRENT_TIME" \
                  '.manual_likes.users += [$user] | .manual_likes.details += [{login: $user, liked_at: $time, type: "manual"}]' \
                  "$STATS_FILE" > tmp.json && mv tmp.json "$STATS_FILE"
                echo "üíñ New manual like from $USER!"
              fi
            fi
          fi

          MANUAL_LIKES_COUNT=$(jq -r '.manual_likes.users | length' "$STATS_FILE")
          TOTAL_LIKES=$((STARS_COUNT + MANUAL_LIKES_COUNT))

          # –°—Ç–≤–æ—Ä—é—î–º–æ JSON —Ñ–∞–π–ª–∏ –¥–ª—è –±–µ–π–¥–∂—ñ–≤
          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üìä views\","
            echo "  \"message\": \"$VIEWS\","
            echo "  \"color\": \"$BADGE_COLOR\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/visitors-badge.json"

          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"‚≠ê stars\","
            echo "  \"message\": \"$TOTAL_LIKES\","
            echo "  \"color\": \"$LIKES_COLOR\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/likes-badge.json"

          # === REPOSITORY INFO ===
          echo "üì¶ Fetching repository information..."
          REPO_INFO=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO")

          REPO_SIZE=$(echo "$REPO_INFO" | jq -r '.size // 0')
          REPO_SIZE_MB=$(echo "scale=1; $REPO_SIZE / 1024" | bc -l 2>/dev/null || echo "0")
          MAIN_LANGUAGE=$(echo "$REPO_INFO" | jq -r '.language // "Unknown"')
          LICENSE=$(echo "$REPO_INFO" | jq -r '.license.name // "No License"')

          # === RELEASES & DOWNLOADS ===
          echo "üì¶ Fetching releases information..."
          RELEASES_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/releases")

          TOTAL_DOWNLOADS=0
          RELEASES_COUNT=0
          HAS_RELEASES=false

          if echo "$RELEASES_RESPONSE" | jq -e '. | length > 0' >/dev/null 2>&1; then
            RELEASES_COUNT=$(echo "$RELEASES_RESPONSE" | jq 'length')
            TOTAL_DOWNLOADS=$(echo "$RELEASES_RESPONSE" | jq '[.[].assets[].download_count] | add // 0')
            HAS_RELEASES=true
            echo "üì¶ Found $RELEASES_COUNT releases with $TOTAL_DOWNLOADS total downloads"
          else
            echo "üì¶ No releases found"
          fi

          # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±–µ–π–¥–∂—ñ
          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üì¶ size\","
            echo "  \"message\": \"${REPO_SIZE_MB}MB\","
            echo "  \"color\": \"blue\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/repo-size.json"

          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üìù language\","
            echo "  \"message\": \"$MAIN_LANGUAGE\","
            echo "  \"color\": \"green\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/repo-language.json"

          {
            echo "{"
            echo "  \"schemaVersion\": 1,"
            echo "  \"label\": \"üìÑ license\","
            echo "  \"message\": \"$LICENSE\","
            echo "  \"color\": \"blue\","
            echo "  \"style\": \"$BADGE_STYLE\""
            echo "}"
          } > "$DATA_DIR/repo-license.json"

          if [ "$HAS_RELEASES" = true ]; then
            {
              echo "{"
              echo "  \"schemaVersion\": 1,"
              echo "  \"label\": \"‚¨áÔ∏è downloads\","
              echo "  \"message\": \"$TOTAL_DOWNLOADS\","
              echo "  \"color\": \"orange\","
              echo "  \"style\": \"$BADGE_STYLE\""
              echo "}"
            } > "$DATA_DIR/downloads-badge.json"
          fi

          # === –¢–ï–•–ù–û–õ–û–ì–Ü–ß–ù–Ü –ë–ï–ô–î–ñ–Ü ===
          echo "üîß Generating technology badges..."
          TECH_BADGES=""

          # –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑ GitHub API
          LANGUAGES_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/languages")

          if echo "$LANGUAGES_RESPONSE" | jq -e . >/dev/null 2>&1; then
            TOP_LANGUAGES=$(echo "$LANGUAGES_RESPONSE" | jq -r 'to_entries | sort_by(.value) | reverse | .[0:3] | .[].key')
            
            for lang in $TOP_LANGUAGES; do
              case $lang in
                "HTML") TECH_BADGES="$TECH_BADGES[![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white)](https://developer.mozilla.org/en-US/docs/Web/HTML) " ;;
                "CSS") TECH_BADGES="$TECH_BADGES[![CSS3](https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&logo=css3&logoColor=white)](https://developer.mozilla.org/en-US/docs/Web/CSS) " ;;
                "JavaScript") TECH_BADGES="$TECH_BADGES[![JavaScript](https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black)](https://developer.mozilla.org/en-US/docs/Web/JavaScript) " ;;
                "TypeScript") TECH_BADGES="$TECH_BADGES[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white)](https://www.typescriptlang.org/) " ;;
                "Python") TECH_BADGES="$TECH_BADGES[![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)](https://www.python.org/) " ;;
                "Java") TECH_BADGES="$TECH_BADGES[![Java](https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&logo=java&logoColor=white)](https://www.java.com/) " ;;
              esac
            done
          fi

          # –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
          TECH_BADGES="$TECH_BADGES[![VS Code](https://img.shields.io/badge/VS_Code-007ACC?style=for-the-badge&logo=visual-studio-code&logoColor=white)](https://code.visualstudio.com/) "
          TECH_BADGES="$TECH_BADGES[![GitHub](https://img.shields.io/badge/GitHub-181717?style=for-the-badge&logo=github&logoColor=white)](https://github.com/) "

          echo "$TECH_BADGES" > "$DATA_DIR/tech-badges.txt"

          echo "üíæ Saving detailed user information..."

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ stargazers
          {
            echo "{\"count\": $STARS_COUNT, \"users\": $STARGAZERS_DETAILED, \"updated_at\": \"$(date -u +"%Y-%m-%d %H:%M:%S")\"}"
          } > "$STARGAZERS_FILE"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–∞–Ω—É–∞–ª—å–Ω—ñ –ª–∞–π–∫–∏
          MANUAL_LIKES_DETAILED=$(jq -r '.manual_likes.details // []' "$STATS_FILE")
          {
            echo "{\"count\": $MANUAL_LIKES_COUNT, \"users\": $MANUAL_LIKES_DETAILED, \"updated_at\": \"$(date -u +"%Y-%m-%d %H:%M:%S")\"}"
          } > "$MANUAL_LIKES_FILE"

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
          ALL_UNIQUE_USERS=$(echo "$STARS_USERS" | jq --argjson manual "$(jq -r '.manual_likes.users // []' "$STATS_FILE")" '. + $manual | unique')
          TOTAL_UNIQUE_USERS=$(echo "$ALL_UNIQUE_USERS" | jq 'length')

          {
            echo "{"
            echo "  \"total_unique_users\": $TOTAL_UNIQUE_USERS,"
            echo "  \"unique_visitors\": $VIEWS,"
            echo "  \"stargazers\": {"
            echo "    \"count\": $STARS_COUNT,"
            echo "    \"users\": $STARS_USERS"
            echo "  },"
            echo "  \"manual_likes\": {"
            echo "    \"count\": $MANUAL_LIKES_COUNT,"
            echo "    \"users\": $(jq -r '.manual_likes.users // []' "$STATS_FILE")"
            echo "  },"
            echo "  \"all_engaged_users\": $ALL_UNIQUE_USERS,"
            echo "  \"updated_at\": \"$(date -u +"%Y-%m-%d %H:%M:%S")\""
            echo "}"
          } > "$USERS_FILE"

          echo "‚úÖ All statistics collected: Views=$VIEWS, Stars=$STARS_COUNT, Manual=$MANUAL_LIKES_COUNT, Total=$TOTAL_LIKES"
          echo "üë• Total unique engaged users: $TOTAL_UNIQUE_USERS"

      - name: üñ• Setup Node.js and dependencies
        run: |
          # Setup Node.js
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs

          # Setup Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable jq libgbm-dev

          # Install Node dependencies
          npm install --no-package-lock --no-save puppeteer@latest canvas@latest

          echo "‚úÖ All dependencies installed"

      - name: üì∏ Generate screenshot
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');

          async function takeScreenshot() {
            let browser;
            try {
              const screenshotDir = process.env.SCREENSHOT_DIR || 'assets';
              const screenshotPath = path.resolve(screenshotDir, 'screenshot.png');
              
              if (!fs.existsSync(screenshotDir)) fs.mkdirSync(screenshotDir, { recursive: true });
              if (fs.existsSync(screenshotPath)) fs.unlinkSync(screenshotPath);
              
              browser = await puppeteer.launch({
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-web-security'],
                executablePath: '/usr/bin/google-chrome'
              });
              
              const page = await browser.newPage();
              const githubPages = 'https://' + '${{ github.repository_owner }}' + '.github.io/' + '${{ github.event.repository.name }}' + '/';
              const indexPath = path.join(process.cwd(), 'index.html');
              
              let targetUrl = fs.existsSync(indexPath) ? 'file://' + indexPath : githubPages;
              console.log('üì° Target URL:', targetUrl);

              await page.goto(targetUrl, { waitUntil: 'networkidle2', timeout: 30000 });
              await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
              await new Promise(resolve => setTimeout(resolve, 2000));
              await page.evaluate(() => window.scrollTo(0, 0));
              await new Promise(resolve => setTimeout(resolve, 1000));

              await page.screenshot({ path: screenshotPath, fullPage: true });
              
              const stats = fs.statSync(screenshotPath);
              console.log('‚úÖ Screenshot created:', Math.round(stats.size / 1024) + 'KB');
              
            } catch (error) {
              console.error('‚ùå Screenshot failed:', error.message);
              
              const screenshotDir = process.env.SCREENSHOT_DIR || 'assets';
              const screenshotPath = path.resolve(screenshotDir, 'screenshot.png');
              if (!fs.existsSync(screenshotDir)) fs.mkdirSync(screenshotDir, { recursive: true });
              
              const { createCanvas } = require('canvas');
              const canvas = createCanvas(800, 600);
              const ctx = canvas.getContext('2d');
              ctx.fillStyle = '#f0f0f0';
              ctx.fillRect(0, 0, 800, 600);
              ctx.fillStyle = '#333';
              ctx.font = '24px Arial';
              ctx.textAlign = 'center';
              ctx.fillText('Screenshot not available', 400, 300);
              
              fs.writeFileSync(screenshotPath, canvas.toBuffer('image/png'));
              console.log('‚ÑπÔ∏è Created fallback screenshot');
            } finally {
              if (browser) await browser.close();
            }
          }

          takeScreenshot().catch(console.error);
          "

      - name: üìù Update README with all content
        run: |
          REPO_URL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}"
          TECH_BADGES=$(cat $DATA_DIR/tech-badges.txt 2>/dev/null || echo "")

          DOWNLOADS_BADGE=""
          if [ -f "$DATA_DIR/downloads-badge.json" ]; then
            DOWNLOADS_BADGE="[![‚¨áÔ∏è Downloads](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/downloads-badge.json)](https://github.com/${{ github.repository }}/releases)"
          fi

          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- AUTOGEN:STATS -->/{exit} {print}' README.md > README_before.tmp
          # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—ñ—Å–ª—è AUTOGEN —Å–µ–∫—Ü—ñ—ó
          awk '/<!-- END:AUTOGEN -->/{found=1; next} found{print}' README.md > README_after.tmp

          # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π README –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ—é AUTOGEN —Å–µ–∫—Ü—ñ—î—é
          {
            cat README_before.tmp
            echo "<!-- AUTOGEN:STATS -->"
            echo "$TECH_BADGES"
            echo ""
            echo "[![üìä Views](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/visitors-badge.json)](https://github.com/${{ github.repository }}/graphs/traffic)"
            echo "[![‚≠ê Stars](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/likes-badge.json)](https://github.com/${{ github.repository }}/actions/workflows/screenshot-and-visitor.yaml)"
            echo "[![üì¶ Size](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-size.json)](https://github.com/${{ github.repository }})"
            echo "[![üìù Language](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-language.json)](https://github.com/${{ github.repository }})"
            echo "[![üìÑ License](https://img.shields.io/endpoint?url=$REPO_URL/$DATA_DIR/repo-license.json)](https://github.com/${{ github.repository }}/blob/main/LICENSE)"
            if [ -n "$DOWNLOADS_BADGE" ]; then
              echo "$DOWNLOADS_BADGE"
            fi
            echo ""
            echo "## üì∏ Latest Screenshot"
            echo "![Project Screenshot]($SCREENSHOT_DIR/screenshot.png)"
            echo "<!-- END:AUTOGEN -->"
            cat README_after.tmp
          } > README.md

          # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
          rm -f README_before.tmp README_after.tmp

          echo "‚úÖ README updated with all content using standard block syntax"

      - name: üì§ Commit and deploy
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "üìä Auto-update: visitors, likes, and screenshot" || exit 0
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          echo "üîÑ Triggering updates..."
          if curl -s -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pages" >/dev/null 2>&1; then
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pages/builds" >/dev/null || true
          fi

          echo "‚úÖ All updates completed successfully"
